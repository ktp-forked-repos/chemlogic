#!/usr/bin/env swipl


% Super irritating style check
:- style_check(-atom).

:- ensure_loaded('../balance/balancer').


% Meta error handling
:- ensure_loaded('../io/meta_error').

:- use_module(units).
:- use_module(calculate).
:- use_module(quantity).


name_quantity(Qty,Sym,Rest,Formula) --> quantity_prefix(Qty), name(Sym,Rest,Formula).
formula_quantity(Qty,Fmt,Elems,ElemsR,Formula,FormulaR) --> quantity_prefix(Qty), formula(Fmt,Elems,ElemsR,Formula,FormulaR).

name_quantity:guidance_errcode(A,B,C) :- name:guidance_errcode(A,B,C).
name_quantity:guidance_unparsed(A,B) :- name:guidance_unparsed(A,B).


convert_name_2_formula(Name,Formula,[Query]) :- 
	queries_convert([Query],[Struct]),
	calc_name_2_formula(Name,Formula,Struct).

calc_name_2_formula(Name,Formula,[Struct,_]) :-
	catch((
	parse(name_quantity(Qty,_,_,Internal),Name,[]),
	convert(output,Internal,Qty,Struct),
	parse(formula_quantity(Struct,output,_,_,Internal,_),Formula,[])
	),
	error(logic_error(Type,Data),_),
	explain_general_rethrow(logic_error,Name,Type,Data)
	).


convert_formula_2_name(Formula,Name,[Query]) :- 
	queries_convert([Query],[Struct]),
	calc_formula_2_name(Formula,Name,Struct).


calc_formula_2_name(Formula,Name,[Struct,_]) :-
	catch((
	parse(formula_quantity(Qty,user,_,_,Internal,_),Formula,[]),
	convert(output,Internal,Qty,Struct),
	parse(name_quantity(Struct,_,_,Internal),Name,[])
	),
	error(logic_error(Type,Data),_),
	explain_general_rethrow(logic_error,Formula,Type,Data)
	).




% vi: ft=prolog
