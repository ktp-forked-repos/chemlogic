
% Rules for handling compounds
:- consult('../formula/compounder').

% The grammar for symbolic equations
:- use_module(equation).
% The grammar for word equations
:- use_module(word_equation).

% Rebase procedure (creates lookup tables, merges re-occurences of elements in a formula, flattens polyatomic groups)
:- use_module(tabulate).

% The solver (converts the coefficient set to a system of linear equations and solves it).
:- use_module(newsolve).

balance_equation(Equation,Solution) :- balance_equation(symbolic,Equation,symbolic,Solution).

balance_equation_real(InGrammar,Equation,OutGrammar,Solution) :-
	call(InGrammar,user,_,[],Elems,[],MoleculeSet,[],SideSet,Equation,[]),

	tabulate(SideSet),
	sort(Elems,ElementSet),

	nsolve(MoleculeSet,ElementSet,Coeffs),
	!,

	call(OutGrammar,output,Coeffs,[],Elems,[],MoleculeSet,[],SideSet,Solution,[]).

/* This function just performs a cleanup */
balance_equation(InGrammar,Equation,OutGrammar,Solution) :-
	balance_equation_real(InGrammar,Equation,OutGrammar,Solution) -> retractall(balance(_,_,_));
	(retractall(balance(_,_,_)), fail).



matrix(_,[],[]) :- !.

matrix(MolSet,[Elem|ElemS],[Row|RowS]) :-
	element_count(MolSet,Elem,Row),
	matrix(MolSet,ElemS,RowS).


element_count([],_,[]).

element_count([Mol|MolS],Elem,[Count|CountS]) :-
      (balance(Mol,Elem,Count) ; Count = 0),
        element_count(MolS,Elem,CountS),
        !.

get_element_count(Mol,Elem,Count) :-
	balance(Mol,Elem,Count);
	Count = 0.

% vi: syntax=prolog
